name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x' # Use .NET 8.0 for your project

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Publish
        run: dotnet publish -c Release -o publish

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: publish

  deploy:
    needs: build
    runs-on: [self-hosted, windows]
    env:
      REMOTE_USERNAME: ${{ secrets.REMOTE_USERNAME }}
      REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}
      REMOTE_SERVER_IP: ${{ secrets.REMOTE_SERVER_IP }}

    steps:
      - name: Download Published Artifact
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: ./app

      - name: List contents of publish folder
        shell: pwsh
        run: |
          Write-Host "Listing contents of $(Resolve-Path ./app)"
          Get-ChildItem -Path ./app -Recurse

      - name: Deploy to Remote IIS via WinRM
        shell: pwsh
        run: |
          Write-Host "Remote Username: $env:REMOTE_USERNAME"
          Write-Host "Remote Server IP: $env:REMOTE_SERVER_IP"
          $localPublishPath = Join-Path $PWD "app"
          Write-Host "Local publish path: $localPublishPath"
          $ErrorActionPreference = "Stop"
          try {
            $securePassword = ConvertTo-SecureString $env:REMOTE_PASSWORD -AsPlainText -Force
            $cred = New-Object System.Management.Automation.PSCredential ($env:REMOTE_USERNAME, $securePassword)
            Write-Host "Attempting to create remote session..."
            $session = New-PSSession -ComputerName $env:REMOTE_SERVER_IP -Credential $cred -ErrorAction Stop
            Write-Host "Remote session created successfully."

            # Ensure remote folder exists
            Invoke-Command -Session $session -ScriptBlock {
              if (-not (Test-Path "C:\Deploy\SimpleMvcApp")) {
                New-Item -Path "C:\Deploy\SimpleMvcApp" -ItemType Directory -Force
              }
            }

            # Copy published files to remote
            Write-Host "Copying files to remote server..."
            Copy-Item -Path "$localPublishPath\*" -Destination "C:\Deploy\SimpleMvcApp" -ToSession $session -Recurse -Force

            # Run IIS deployment and log everything
            Invoke-Command -Session $session -ScriptBlock {
              param($deployPath)
              Import-Module WebAdministration

              Write-Host "Stopping IIS site 'SimpleMvcApp'"
              Stop-WebSite -Name "SimpleMvcApp"

              Write-Host "Removing old site content"
              Remove-Item -Recurse -Force "C:\inetpub\wwwroot\Production\SimpleMvcApp\*" -ErrorAction SilentlyContinue

              Write-Host "Copying new files to IIS directory"
              Copy-Item -Path "$deployPath\*" -Destination "C:\inetpub\wwwroot\Production\SimpleMvcApp\" -Recurse -Force

              Write-Host "Starting IIS site 'SimpleMvcApp'"
              Start-WebSite -Name "SimpleMvcApp"
            } -ArgumentList "C:\Deploy\SimpleMvcApp"

            Remove-PSSession $session
            Write-Host "Deployment completed successfully."
          }
          catch {
            Write-Host "ERROR: $($_.Exception.Message)"
            Write-Host "STACK TRACE: $($_.ScriptStackTrace)"
            exit 1
          }