name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Publish
        run: dotnet publish -c Release -o publish

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: publish

  deploy:
    needs: build
    runs-on: [self-hosted, windows]
    env:
      REMOTE_USERNAME: 'attendance\esoft'
      REMOTE_PASSWORD: 'Esoft@1234'
      REMOTE_SERVER_IP: '192.168.0.20'

    steps:
      - name: Download Published Artifact
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: ./app

      - name: Deploy to Remote IIS via WinRM
        shell: pwsh
        run: |
          $localPublishPath = Join-Path $PWD "app"
          $securePassword = ConvertTo-SecureString $env:REMOTE_PASSWORD -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($env:REMOTE_USERNAME, $securePassword)

          $session = New-PSSession -ComputerName $env:REMOTE_SERVER_IP -Credential $cred

          # Define log path on remote machine
          $remoteLogFile = "C:\Deploy\SimpleMvcApp\deploy.log"

          # Ensure remote folder exists
          Invoke-Command -Session $session -ScriptBlock {
            if (-not (Test-Path "C:\Deploy\SimpleMvcApp")) {
              New-Item -Path "C:\Deploy\SimpleMvcApp" -ItemType Directory -Force
            }
          }

          # Copy published files to remote
          Copy-Item -Path "$localPublishPath\*" -Destination "C:\Deploy\SimpleMvcApp" -ToSession $session -Recurse -Force

          # Run IIS deployment and log everything
          Invoke-Command -Session $session -ScriptBlock {
          param($deployPath, $logPath)

            function Log {
              param([string]$message)
              $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              $logLine = "$timestamp $message"
              # Ensure parent folder exists
              $folder = Split-Path $logPath -Parent
              if (-not (Test-Path $folder)) {
                New-Item -Path $folder -ItemType Directory -Force
              }
              $logLine | Out-File -FilePath $logPath -Append -Encoding utf8
            }

            Import-Module WebAdministration
            Log "üîÅ Deployment started."

            try {
              Log "üìå Stopping IIS site 'SimpleMvcApp'"
              Stop-WebSite -Name "SimpleMvcApp"

              Log "üßπ Removing old site content"
              Remove-Item -Recurse -Force "C:\inetpub\wwwroot\Production\SimpleMvcApp\*" -ErrorAction SilentlyContinue

              Log "üì§ Copying new files to IIS directory"
              Copy-Item -Path "$deployPath\*" -Destination "C:\inetpub\wwwroot\Production\SimpleMvcApp\" -Recurse -Force

              Log "üöÄ Starting IIS site 'SimpleMvcApp'"
              Start-WebSite -Name "SimpleMvcApp"

              Log "‚úÖ Deployment completed successfully."
            }
            catch {
              Log "‚ùå Deployment failed: $($_.Exception.Message)"
              throw
            }
          } -ArgumentList "C:\Deploy\SimpleMvcApp", "C:\Deploy\SimpleMvcApp\deploy.log"

          Remove-PSSession $session

